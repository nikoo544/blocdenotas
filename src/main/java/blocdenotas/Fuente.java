/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package blocdenotas;

import java.awt.GraphicsEnvironment;
import java.awt.Font;

/**
 *
 * @author RohaN
 */
public class Fuente extends javax.swing.JDialog {

    /**
     * Creates new form Font
     * @param parent
     * @param modal
     */
    public Fuente(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
       
        //Las listas fueron cargadas en el código de creación de cada una.
        
        //Adquiere los valores de la fuente que esta utilizando el Text Area.
        Font initFont = Bloc.textArea.getFont();
        String initName = initFont.getName();
        int initType = initFont.getStyle();
        int initSize = initFont.getSize();
        String indexBlocSize = Integer.toString(initSize);
       
        //Setea las listas por defecto.
        fontList.setSelectedValue(initName,true);
        typeList.setSelectedIndex(initType);
        sizeList.setSelectedValue(indexBlocSize,true);
        
        //Setea los text field por defecto.
        fontField.setText(fontList.getSelectedValue());
        typeField.setText(typeList.getSelectedValue());
        sizeField.setText(sizeList.getSelectedValue());
        
        //Setea el preview field con una fuente.
        previewField.setFont(initFont);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fontList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        typeList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        sizeList = new javax.swing.JList<>();
        previewField = new javax.swing.JTextField();
        fontField = new javax.swing.JTextField();
        typeField = new javax.swing.JTextField();
        sizeField = new javax.swing.JTextField();
        aceptarButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        labelFont = new javax.swing.JLabel();
        labelTypeFont = new javax.swing.JLabel();
        labelSizeFont = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(null);
        setIconImages(null);

        fontList.setModel(new javax.swing.AbstractListModel<String>() {
            //Cargo las fuentes del equipo en un array de String.
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            String[] strings = ge.getAvailableFontFamilyNames();
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        fontList.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                fontListMouseDragged(evt);
            }
        });
        fontList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fontListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(fontList);

        typeList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {"Plain","Bold","Italic","Bold Italic"};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        typeList.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                typeListMouseDragged(evt);
            }
        });
        typeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(typeList);

        sizeList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {"8","9","10","11","12","14","16","18","20","22","24","26","32","36","48","72" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        sizeList.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sizeListMouseDragged(evt);
            }
        });
        sizeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sizeListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(sizeList);

        previewField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        previewField.setText("The Spectacular Spiderman");
        previewField.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Muestra", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12))); // NOI18N

        fontField.setEditable(false);
        fontField.setEnabled(false);

        typeField.setEnabled(false);

        sizeField.setEnabled(false);

        aceptarButton.setText("Aceptar");
        aceptarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        labelFont.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelFont.setText("Fuente:");

        labelTypeFont.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelTypeFont.setText("Tipo de fuente:");

        labelSizeFont.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labelSizeFont.setText("Tamaño:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(previewField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(aceptarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fontField)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelFont)
                                .addGap(111, 111, 111)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(typeField, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelTypeFont)
                                .addGap(46, 46, 46)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSizeFont, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(sizeField, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFont)
                    .addComponent(labelTypeFont)
                    .addComponent(labelSizeFont))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(previewField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aceptarButton)
                    .addComponent(cancelButton))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fontListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fontListMouseClicked
    loadFont();
    previewFont();
    }//GEN-LAST:event_fontListMouseClicked

    private void fontListMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fontListMouseDragged
    loadFont();
    previewFont();
    }//GEN-LAST:event_fontListMouseDragged

    private void typeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeListMouseClicked
    loadType();
    previewFont();
    }//GEN-LAST:event_typeListMouseClicked

    private void typeListMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeListMouseDragged
    loadType();
    previewFont();
    }//GEN-LAST:event_typeListMouseDragged

    private void sizeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sizeListMouseClicked
    loadSize();
    previewFont();
    }//GEN-LAST:event_sizeListMouseClicked

    private void sizeListMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sizeListMouseDragged
    loadSize();
    previewFont();
    }//GEN-LAST:event_sizeListMouseDragged

    private void aceptarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarButtonActionPerformed
     //Toma la fuente del Text Preview y se la Asigna al Text Area principal.
        Font pirulo = previewField.getFont();
        Bloc.textArea.setFont(pirulo);

        //Cierra la ventana
        dispose();
    }//GEN-LAST:event_aceptarButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    //Cierra la ventana.
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Font.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Font.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Font.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Font.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Fuente dialog = new Fuente(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    
    }
    
    private void loadFont(){
    fontField.setText(fontList.getSelectedValue());   
    }
    private void loadType(){
    typeField.setText(typeList.getSelectedValue());   
    }
    private void loadSize(){
    sizeField.setText(sizeList.getSelectedValue());    
    }
    
    public void previewFont() {
     
    //Setea la fuente con los items seleccionados de las listas.
    
    //Toma los valores de las listas.
    String fontname = fontList.getSelectedValue();
    String fonttype = typeList.getSelectedValue();
    String fontsize = sizeList.getSelectedValue();
    int sizer = Integer.parseInt(fontsize);
    
    //Evalua la selección de la lista de tipos de fuentes 
    //y segun la elección setea la fuente del textPreview. 
     if ( fonttype.equals("Plain")) {
        
        previewField.setFont(new java.awt.Font(fontname,java.awt.Font.PLAIN,sizer));
    } 
    
    if ( fonttype.equals("Bold")) {
        
        previewField.setFont(new java.awt.Font(fontname,java.awt.Font.BOLD,sizer));
        
    } 
    
    if ( fonttype.equals("Italic")) {
        
        previewField.setFont(new java.awt.Font(fontname,java.awt.Font.ITALIC,sizer));
        
    } 
    
    if ( fonttype.equals("Bold Italic")) {
        
         previewField.setFont(new java.awt.Font(fontname,java.awt.Font.BOLD + java.awt.Font.ITALIC,sizer));  
    } 
     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptarButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField fontField;
    private javax.swing.JList<String> fontList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelFont;
    private javax.swing.JLabel labelSizeFont;
    private javax.swing.JLabel labelTypeFont;
    private javax.swing.JTextField previewField;
    private javax.swing.JTextField sizeField;
    private javax.swing.JList<String> sizeList;
    private javax.swing.JTextField typeField;
    private javax.swing.JList<String> typeList;
    // End of variables declaration//GEN-END:variables
}
